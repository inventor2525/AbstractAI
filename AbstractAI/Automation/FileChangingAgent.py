from AbstractAI.LLMs.LLM import Conversation, Iterator, LLM_Response, Union
from AbstractAI.Helpers.ResponseParsers import extract_paths_and_code
from jinja2 import Template
from copy import deepcopy
from .Agent import *
import os

class FileChangingAgent(Agent):
	def __call__(self, conversation:Conversation) -> Conversation:
		stack_trace = CallerInfo.catch([0,1])
		
		all_file_items = []
		for message in conversation:
			source = message.source
			if isinstance(source, EditSource):
				source = source.source
			if isinstance(source, FilesSource):
				all_file_items.extend(source.items.items)
		
		files = FilesSource.from_items(all_file_items) | conversation.message_sequence
		
		file_changing_conv = Conversation("File changes", "Takes instructions from some other agent, and applies those instructions to files") | stack_trace
		file_changing_conv + (
			FileChangingAgent.conversation_template.render(
				files=files.load(),
				original_request=conversation[-2].content,
				ai_instructions=conversation[-1].content,
			), Role.System()
		) | stack_trace
		file_changing_conv.props.files = files
		file_changing_conv.props.user_request = conversation[-2]
		file_changing_conv.props.ai_change_instructions = conversation[-1]
		
		file_changing_conv + ("Now, recite the new versions of the files it changed, in the same format as I just gave them to you.", Role.User()) | stack_trace
		return file_changing_conv
		
	def chat(self, conversation: Conversation, start_str: str = "", stream=False, max_tokens: int = None, auto_append: bool = False) -> LLM_Response | Iterator[LLM_Response]:
		return self.llm.chat(conversation, start_str=start_str, stream=stream, max_tokens=max_tokens, auto_append=auto_append)
	
	def process_response(self, conversation: Conversation):
		message = conversation[-1]
		for path, code in extract_paths_and_code(message.content):
			# Ensure the directory exists
			os.makedirs(os.path.dirname(path), exist_ok=True)
			
			# Write the code to the file
			with open(path, 'w', encoding='utf-8') as file:
				file.write(code)
			

FileChangingAgent.conversation_template = Template("""
You are part of an automated coding system meant to merge code changes produced by an AI.

# Your Job

You take original code and code change instructions from another AI and recite the new versions of the changed files in their entirety.

(Basically, you pass butter. PASS it, NOT make it!!! You PASS butter!!!)

## Job Details

Bellow are a series of original un-edited files, some of which need to be changed but probably not all. After the files are instructions about what in them needs to be changed. Those instructions were generated by an AI in a previous conversation, so only for context: I will also share the user's prompt that resulted in the creation of those instructions.

The instructions by the AI however, may not directly say which files the changes should be applied to, so it is your job to figure that out from them and the originals I am giving you.

Try to apply changes to the file that seems most appropriate. If there is something new being added (like a new class) and it seems to fit in an existing file that already has multiple similar things, you can add it to that file, otherwise assume it should go in a new file with the appropriate imports and try to pick a path in the existing project folder structure that seems appropriate.

I want you to recite the whole and complete version of only the files that need to be changed. 

Your response format should be very specific as it needs to be parsed automatically. Each file is given as the path to that file, followed by a code block. I want you to respond in the same format, however repetitive and painstaking that is.

Please recite the complete new file given the changes listed in the instructions. -- This will be used directly as the new file contents, and the new version you give will be saved automatically, so it is imperative that you not write cop outs like 'remaining code the same' or 'rest of code here' or 'code unchanged' or 'see original', etc.

Do not make unnecessary changes!

Examples:
- Removing comments
- Changing indentation style
- Changing where whitespace is in type hints, around operators, or in signatures.
- Adding or removing new lines
- Removing or revising type hints or doc strings
- Adding comments meant to talk to the user and say what code you added or where

If the instructions provided by the AI that you are following contain any comments that point out some new code was added, do not include that comment. Only include comments that functionally describe the code like what would be in a actual codebase. You are not talking to a user, you are writing a final draft.

Try to preserve the original file to the fullest extent possible while still following the intent of the instructions provided. Only the meat of what the AI's instructions were getting at should be changed. If the instructions written by the AI do not follow the same format as the original code, use the same format as the original unless the user had asked for it in their original request.

# Original Files
These are the files as they currently exist on the file system:
========================+++++++++++========================
{{files}}
========================+++++++++++========================

# Original Request
This is what the user asked the first AI to do, they exist here for your reference in understanding what the first AI did and why so you can see what is relevant or not. They are not here so that you can perform them yourself or in anyway talk to the user about what in them was or was not fulfilled!

========================+++++++++++========================
{{original_request}}
========================+++++++++++========================

# AI's Instructions
This is what the AI said in response, except fixing formatting to align with the original, keeping comments that should be in a final draft, etc, as per your job description, these are largely the instructions that you should follow to create the new file versions.

========================+++++++++++========================
{{ai_instructions}}
========================+++++++++++========================
""")